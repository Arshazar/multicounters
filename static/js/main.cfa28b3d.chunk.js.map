{"version":3,"sources":["Counter.js","Counters.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Counter","step","useState","num","setNum","className","Button","inverted","color","onClick","Counters","steps","length","map","key","indexOf","ErrorBoundary","props","state","hasError","error","info","this","setState","alert","children","React","Component","App","addCounter","number","isNaN","concat","changeNumber","n","value","parseFloat","target","style","width","height","background","Input","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0SAuBeA,EApBC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACJC,mBAAS,GADL,mBACnBC,EADmB,KACdC,EADc,KAO1B,OACI,oCACI,yBAAKC,UAAU,0BAAf,QAA8CJ,GAC9C,yBAAKI,UAAU,0BAA0BF,GACzC,yBAAKE,UAAU,yCACX,kBAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,MAAM,MAAMC,QAAS,WAR9CL,EAAOD,EAAMF,KAQL,UCIDS,EAhBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACI,yBAAKN,UAAU,4BACO,IAAjBM,EAAMC,OACDD,EAAME,KAAI,SAACZ,GACP,OAAgB,IAATA,EACH,yBAAKI,UAAU,qFACX,kBAAC,EAAD,CAASJ,KAAMA,EAAMa,IAAKH,EAAMI,QAAQd,MAE5C,QAER,OCZGe,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFV,E,8DAKDC,EAAOC,GAErBC,KAAKC,SAAS,CAAEJ,UAAU,IAE1BK,MAAMJ,EAAOC,K,+BAIb,OAAIC,KAAKJ,MAAMC,SAEJ,qDAEJG,KAAKL,MAAMQ,a,GAlBiBC,IAAMC,WCuElCC,E,kDAnEX,aAAe,IAAD,8BACV,gBAOJC,WAAa,WAEiB,IAAtB,EAAKX,MAAMY,QACkB,kBAAtB,EAAKZ,MAAMY,QACjBC,MAAM,EAAKb,MAAMY,SAElB,EAAKP,SAAS,CACVZ,MAAO,EAAKO,MAAMP,MAAMqB,OAAO,CAAC,EAAKd,MAAMY,YAfzC,EAsBdG,aAAe,SAACC,GACZ,IAAMC,EAAQC,WAAWF,EAAEG,OAAOF,OAClC,cAAeA,GACX,IAAK,SACD,EAAKZ,SAAS,CAAEO,OAAQK,IACxB,MACJ,QACI,EAAKZ,SAAS,CAAEO,OAAQ,MA3BhC,EAAKZ,MAAQ,CACTY,OAAQ,EACRnB,MAAO,IAJD,E,qDAmCV,OACI,yBACIN,UAAU,gCACViC,MAAO,CACHC,MAAO,QACPC,OAAQ,OACRC,WACI,6EAGR,yBAAKpC,UAAU,iFACX,kBAACqC,EAAA,EAAD,CACIC,SAAUrB,KAAKW,aACf5B,UAAU,sCACVuC,YAAY,8BAEhB,kBAACtC,EAAA,EAAD,CACIE,MAAM,SACNH,UAAU,cACVI,QAASa,KAAKO,YAHlB,gBAQJ,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,MAAOW,KAAKJ,MAAMP,c,GA7D9Be,IAAMC,WCOJkB,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCVZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACxC,GACJyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.cfa28b3d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Button } from 'semantic-ui-react'\n\nconst Counter = ({ step }) => {\n    const [num, setNum] = useState(0)\n\n    const changeNum = () => {\n        setNum(num + step) //adding to the prev value by step value on every pressing run button\n    }\n\n    return (\n        <>\n            <div className=\"w-100 pa2 bb b--purple\">Step {step}</div>\n            <div className=\"f1 fw6 mv5 self-center\">{num}</div>\n            <div className=\"ma4 justify-center items-center f3 tc\">\n                <Button inverted color=\"red\" onClick={() => changeNum()}>\n                    RUN\n                </Button>\n            </div>\n        </>\n    )\n}\n\nexport default Counter\n","import React from 'react'\nimport Counter from './Counter'\n\nconst Counters = ({ steps }) => {\n    return (\n        <div className=\"flex flex-wrap w-80 h-75\">\n            {steps.length !== 0\n                ? steps.map((step) => {\n                      return step !== 0 ? (\n                          <div className=\"flex flex-column ba br3 bw1 b--white w-80 w-20-l w-33-m w-40-ns h-50 bg-white ma3\">\n                              <Counter step={step} key={steps.indexOf(step)} />\n                          </div>\n                      ) : null\n                  })\n                : null}\n        </div>\n    )\n}\n\nexport default Counters\n","import React from 'react'\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { hasError: false }\n    }\n\n    componentDidCatch(error, info) {\n        // Display fallback UI\n        this.setState({ hasError: true })\n        // You can also log the error to an error reporting service\n        alert(error, info)\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>\n        }\n        return this.props.children\n    }\n}\n","import React from 'react'\nimport { Input, Button } from 'semantic-ui-react'\nimport Counters from './Counters'\nimport ErrorBoundary from './ErrorBoundary'\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            number: 0,\n            steps: [], //for having several counters\n        }\n    }\n    //adds the number to the steps\n    addCounter = () => {\n        if (\n            this.state.number !== 0 &&\n            typeof this.state.number === 'number' &&\n            !isNaN(this.state.number)\n        ) {\n            this.setState({\n                steps: this.state.steps.concat([this.state.number]),\n            })\n        }\n        return\n    }\n\n    //changes number value dynamically and saves it into the state\n    changeNumber = (n) => {\n        const value = parseFloat(n.target.value)\n        switch (typeof value) {\n            case 'number':\n                this.setState({ number: value })\n                break\n            default:\n                this.setState({ number: 0 })\n                break\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className=\"flex flex-column items-center\"\n                style={{\n                    width: '100vw',\n                    height: '100%',\n                    background:\n                        'linear-gradient(28deg, rgba(255,220,121,1) 0%, rgba(148,233,231,1) 100%)',\n                }}\n            >\n                <div className=\"flex flex-wrap w-80 h-25 ba bw1 b--purple br4 items-center justify-center mv3\">\n                    <Input\n                        onChange={this.changeNumber}\n                        className=\"flex w-75 w-50-l w-50-m w-50-ns mr3\"\n                        placeholder=\"This only accepts numbers\"\n                    />\n                    <Button\n                        color=\"violet\"\n                        className=\"w-25 w-20-l\"\n                        onClick={this.addCounter}\n                    >\n                        Add counter\n                    </Button>\n                </div>\n                <ErrorBoundary>\n                    <Counters steps={this.state.steps} />\n                </ErrorBoundary>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css' //local css\nimport 'semantic-ui-css/semantic.min.css' // UI library\nimport 'tachyons' //css library\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}