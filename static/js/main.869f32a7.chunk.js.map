{"version":3,"sources":["serviceWorker.js","components/Counter.js","components/Counters.js","components/ErrorBoundary.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Counter","step","React","useState","num","setNum","className","style","toString","length","fontSize","height","Button","color","inverted","onClick","Counters","steps","map","key","indexOf","ErrorBoundary","props","hasError","info","this","setState","alert","children","Component","App","number","addCounter","bind","changeNumber","isNaN","concat","n","value","parseFloat","target","Input","onChange","placeholder","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.869f32a7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport { Button } from 'semantic-ui-react'\n\nconst Counter = ({ step }) => {\n    const [num, setNum] = React.useState(0)\n\n    const changeNum = () => {\n        setNum(num + step) //adding to the prev value by step value on every pressing run button\n    }\n\n    // to fit the counted number in the card, changes its font size\n    const fitFont = () => {\n        if (num.toString().length <= 9) {\n            return { fontSize: '3rem' }\n        } else if (num.toString().length < 13) {\n            return { fontSize: '2.25rem' }\n        } else {\n            return { fontSize: '1.5rem' }\n        }\n    }\n\n    return (\n        <div className=\"flex flex-column ba br3 bw1 b--white w-80 w-20-l w-33-m w-40-ns h-50 bg-white ma3\">\n            <div className=\"w-100 pa2 bb b--purple h-20\">Step {step}</div>\n            <div style={fitFont()} className=\"f1 fw6 pv4 self-center h-50\">\n                {num}\n            </div>\n            <div\n                style={{ height: '30%' }}\n                className=\"justify-center items-center f3 tc\"\n            >\n                <Button color=\"red\" inverted onClick={() => changeNum()}>\n                    RUN\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter\n","import React from 'react'\nimport Counter from './Counter'\n\nconst Counters = ({ steps }) => {\n    return (\n        <div className=\"flex flex-wrap w-80 h-75\">\n            {steps.length !== 0\n                ? steps.map((step) => {\n                      return step !== 0 ? (\n                          <Counter step={step} key={steps.indexOf(step)} />\n                      ) : null\n                  })\n                : null}\n        </div>\n    )\n}\n\nexport default Counters\n","import React from 'react'\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { hasError: false }\n    }\n\n    componentDidCatch(error, info) {\n        // Display fallback UI\n        this.setState({ hasError: true })\n        // You can also log the error to an error reporting service\n        alert(error, info)\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>\n        }\n        return this.props.children\n    }\n}\n","import React from 'react'\nimport { Input, Button } from 'semantic-ui-react'\nimport Counters from './components/Counters'\nimport ErrorBoundary from './components/ErrorBoundary'\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            number: 0,\n            steps: [], //for having several counters,\n            error: '',\n        }\n        this.addCounter = this.addCounter.bind(this)\n        this.changeNumber = this.changeNumber.bind(this)\n    }\n    //adds the number to the steps\n    addCounter() {\n        if (\n            this.state.number !== 0 &&\n            typeof this.state.number === 'number' &&\n            !isNaN(this.state.number)\n        ) {\n            this.setState({\n                steps: this.state.steps.concat([this.state.number]),\n            })\n            this.setState({ error: '' })\n            return\n        }\n        this.setState({ error: 'This only accepts numbers like 2, -3, 6.7' })\n    }\n\n    //changes number value dynamically and saves it into the state\n    changeNumber(n) {\n        const value = parseFloat(n.target.value)\n        switch (typeof value) {\n            case 'number':\n                this.setState({ number: value })\n                this.setState({ error: '' })\n                break\n            default:\n                this.setState({ number: 0 })\n                this.setState({\n                    error: 'This only accepts numbers like 2, -3, 6.7',\n                })\n                break\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"w-100 h-100 flex flex-column items-center\">\n                <div className=\"flex flex-wrap w-80 h-25 ba bw1 b--purple br4 items-center justify-center mv3\">\n                    <div\n                        style={{ height: '29%' }}\n                        className=\"ui input flex flex-column w-75 w-50-l w-50-m w-50-ns mr3 pa0\"\n                    >\n                        <Input\n                            style={{ height: '90%' }}\n                            onChange={this.changeNumber}\n                            placeholder=\"Step\"\n                        />\n                        <p style={{ height: '10%' }} className=\"f6 red\">\n                            {this.state.error}\n                        </p>\n                    </div>\n                    <Button\n                        color=\"violet\"\n                        className=\"w-35 w-20-l\"\n                        onClick={this.addCounter}\n                    >\n                        <p className=\"f6\">Add counter</p>\n                    </Button>\n                </div>\n                <ErrorBoundary>\n                    <Counters steps={this.state.steps} />\n                </ErrorBoundary>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'semantic-ui-css/semantic.min.css' // UI library\nimport './index.css' //local css\nimport 'tachyons' //css library\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}